{"version":3,"sources":["components/CreateLink.js","components/LoggingList.js"],"names":["CreateLink","to","css","position","right","bottom","cursor","backgroundColor","green300","LoggingList","props","useState","isFetching","isDialogOpen","toDeleteLogId","listState","setListState","onDialogClose","logs","actions","label","primary","onClick","style","color","keyboardFocused","deleteFn","then","LoadingSpinner","boxSizing","padding","height","overflow","length","lineHeight","map","log","i","category","description","amount","toUpperCase","slice","ROUTES","logging","new","title","modal","open","onRequestClose"],"mappings":"0PAYe,SAASA,EAAT,GAAoC,IAAdC,EAAa,EAAbA,GACnC,OACE,kBAAC,IAAD,eAAMA,GAAIA,GAAQC,cAAI,CACpBC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,OAAQ,aAER,kBAAC,IAAD,CAAsBC,gBAAiBC,YACrC,kBAAC,IAAD,Q,8CCIO,SAASC,EAAYC,GAAe,IAAD,EACPC,mBAAS,CAChDC,YAAY,EACZC,cAAc,EACdC,cAAe,KAJ+B,mBACzCC,EADyC,KACvBC,EADuB,KAc1CC,EAAgB,WACpBD,EAAa,CACXH,cAAc,EACdC,cAAe,MAkBXI,EAASR,EAATQ,KACAN,EAAeG,EAAfH,WAEFO,EAAU,CACd,kBAAC,IAAD,CACEC,MAAM,SACNC,SAAS,EACTC,QAASL,EACTM,MAAO,CAAEC,MAAO,aAElB,kBAAC,IAAD,CACEJ,MAAM,SACNC,SAAS,EACTI,iBAAiB,EACjBH,QA5Bc,WAAO,IACfI,EAAahB,EAAbgB,SACAZ,EAAkBC,EAAlBD,cAERE,EAAa,CAAEJ,YAAY,IAE3Bc,EAASZ,GAAea,MAAK,WAC3BX,EAAa,CACXJ,YAAY,EACZC,cAAc,QAoBhBU,MAAO,CAAEC,MAAO,cAIpB,OAAIZ,GAAuB,OAATM,EAEd,kBAACU,EAAA,EAAD,MAKF,wBAAS1B,cAAI,CACX2B,UAAW,aACXC,QAAS,SACTC,OAAQ,OACRxB,gBAAiB,UACjByB,SAAU,WAERd,GAAwB,IAAhBA,EAAKe,QACb,wBAAS/B,cAAI,CACXsB,MAAO,UACPU,WAAY,WAFd,yGAQDhB,GACC,4BAEIA,EAAKiB,KAAI,SAACC,EAAKC,GAAM,IAMZC,EAAiCF,EAAjCE,SAAiCF,EAAvBG,YAAuBH,EAAVI,OAC9B,OACE,iCAEIF,EAAS,GAAGG,cAAgBH,EAASI,MAAM,GAF/C,KAEqDN,EAAIG,YAFzD,KAEwEH,EAAII,YAOtF,kBAACxC,EAAD,CAAYC,GAAI0C,IAAOC,QAAQC,MAC/B,kBAAC,IAAD,CACEC,MAAM,gBACN3B,QAASA,EACT4B,OAAO,EACPC,KAAMjC,EAAUF,aAChBoC,eAAgBhC,GALlB,qC","file":"static/js/9.4e77209b.chunk.js","sourcesContent":["// @flow\nimport React from 'react'\nimport { css } from 'glamor'\nimport { Link } from 'react-router-dom'\nimport FloatingActionButton from 'material-ui/FloatingActionButton'\nimport ContentAdd from 'material-ui/svg-icons/content/add'\nimport { green300 } from 'material-ui/styles/colors';\n\ntype Props = {\n  to: string\n}\n\nexport default function CreateLink({ to }: Props) {\n  return (\n    <Link to={to} {...css({\n      position: 'fixed',\n      right: '2rem',\n      bottom: '5rem',\n      cursor: 'pointer',\n    })}>\n      <FloatingActionButton backgroundColor={green300}>\n        <ContentAdd />\n      </FloatingActionButton>\n    </Link>\n  )\n}\n","// @flow\n// $ExpectError useState hasn't been typed yet\nimport React, { useState } from 'react'\nimport { css } from 'glamor'\nimport Dialog from 'material-ui/Dialog'\nimport FlatButton from 'material-ui/FlatButton'\n\nimport { ROUTES } from '../constants'\nimport { Log } from '../types'\nimport CreateLink from './CreateLink'\nimport LoadingSpinner from './LoadingSpinner'\nimport LoggingEntry from './LoggingEntry'\n\ntype Props = {\n  logs: Array<Log> | null,\n  deleteFn: (id: string) => Promise<any>\n}\n\ntype State = {\n  isFetching: boolean,\n  isDialogOpen: boolean,\n  toDeleteLogId: string,\n}\n\n// why does pure function component not updating itself after `logs` change?\nexport default function LoggingList(props: Props) {\n  const [listState: State, setListState] = useState({\n    isFetching: false,\n    isDialogOpen: false,\n    toDeleteLogId: '',\n  })\n\n  const onDialogOpen = (id: string) => {\n    setListState({ \n      isDialogOpen: true,\n      toDeleteLogId: id,\n    })\n  }\n\n  const onDialogClose = () => {\n    setListState({\n      isDialogOpen: false,\n      toDeleteLogId: '',\n    })\n  }\n\n  const deleteLog = () => {\n    const { deleteFn } = props\n    const { toDeleteLogId } = listState\n\n    setListState({ isFetching: true })\n\n    deleteFn(toDeleteLogId).then(() => {\n      setListState({ \n        isFetching: false,\n        isDialogOpen: false,\n      })\n    })\n  }\n\n  const { logs } = props\n  const { isFetching } = listState\n\n  const actions = [\n    <FlatButton\n      label=\"Cancel\"\n      primary={true}\n      onClick={onDialogClose}\n      style={{ color: '#4caf50' }}\n    />,\n    <FlatButton\n      label=\"Delete\"\n      primary={true}\n      keyboardFocused={true}\n      onClick={deleteLog}\n      style={{ color: '#4caf50' }}\n    />,\n  ]\n\n  if (isFetching || logs === null) {\n    return (\n      <LoadingSpinner />\n    )\n  }\n\n  return (\n    <div {...css({\n      boxSizing: 'border-box',\n      padding: '1.4rem',\n      height: '100%',\n      backgroundColor: '#f5f5f5',\n      overflow: 'scroll'\n    })}>\n      {(logs && logs.length === 0) && \n        <div {...css({\n          color: '#9e9e9e',\n          lineHeight: '1.5rem',\n        })}>\n          You don't have any log record at this time, \n            try click the add button and start tracking your expense!\n        </div>\n      }\n      {logs &&\n        <ul>\n          {\n            logs.map((log, i) => {\n              // <LoggingEntry \n              //   {...log}\n              //   key={i}\n              //   onClickDelete={onDialogOpen}\n              // />\n              const {category, description, amount} = log;\n              return (\n                <div>\n                  {/* TODO: change this to emoji */}\n                  [{category[0].toUpperCase() + category.slice(1)}] {log.description}: {log.amount}\n                </div>\n              );\n            })\n          }\n        </ul>\n      }\n      <CreateLink to={ROUTES.logging.new} />\n      <Dialog\n        title=\"Are you sure?\"\n        actions={actions}\n        modal={false}\n        open={listState.isDialogOpen}\n        onRequestClose={onDialogClose}\n      >\n        Removed log can not be restored.\n      </Dialog>\n    </div>\n  )\n}\n"],"sourceRoot":""}